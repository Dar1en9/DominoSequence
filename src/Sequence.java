//Класс преобразует набор домино в замкнутую последовательность
public class Sequence {
    private final Domino[] set; //Переменная массива костей (массив используется тот же, что и в наборе)
    private int last; //Номер последней добавленной в последовательность домино
    public Sequence(DominoSet set) { //Конструктор, в параметре передаем набор, задаёт последовательность
        last = - 1;
        this.set = set.getSet();
    }
    public void add(Domino domino){ //Добавляет домино в последовательность, в параметре передаем нужное домино
        int i = domino.getN(); //Уник. номер указанного домино
        if (last == - 1) { //Если последовательность пуста, добавляем домино, указываем его началом и концом
            last = i;
            set[last].next(i);
        }
        else{ //Иначе добавляем домино, меняя указатель предыдущего на добавляемую кость, а у нового домино
            //ставим указатель на первую кость
            set[i].next(set[last].getNext());
            set[last].next(i);
            last = i;
        }
    }
    private int search(int N, int cur) { //Поиск домино, предыдущего за вытаскиваемым, в параметре передаем
        // какой N-ный элемент вытаскиваем и значение текущего, от которого ведем отсчет
        for(int i = 0; i < N; i++)
            cur = set[cur].getNext();
        return cur;
    }
    public void print() { //Выводит последовательность в строчку
        if (last == - 1)
            System.out.println("Пусто");
        else {
            int i = set[last].getNext(); //Первый добавленный элемент в последовательность
            while (i != last) {
                set[i].print();
                i = set[i].getNext();
            }
            set[last].print();
            System.out.println();
        }
    }
    public int getLast(){ //Возвращает уник. номер последней в последовательности кости
        return set[last].getN();
    }
    public Domino exclude(int N, int cur){ //Вытаскивает кость из последовательности, в параметре передаем
        //каждый какой (N-ный) элемент вытаскиваем и какая текущая домино, на к-ой остановились при проходке
        //возвращает вытаскиваемое домино
        int next; //next - номер следующего за предыдущим, т.е. номер вытаскиваемого домино
        if (set[last].getNext() == last){ //Если в последовательности остался последний элемент, вытаскиваем его
            next = last;
            last = -1; //Ставим last -1 чтобы потом вывести значение "Пусто"
        }
        else{ //Иначе проходимся от текущего домино до след. вытаскиваемого (не включительно), меняем указатели
            //предыдущего от вытаскиваемого на следующее за вытаскиваемым домино, таким образом исключая нужный
            //элемент из последовательности, а в указателе исключенного храним идущий перед ним
            cur = search(N, cur);
            next = set[cur].getNext();
            set[cur].next(set[next].getNext());
            if (next == last) //Если вытаскивается элемент, являющийся концом последовательности, то концом
                //становится идущий перед ним
                last = cur;
            set[next].next(cur);
        }
        return set[next];
    }
}
